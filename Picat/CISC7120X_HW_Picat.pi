% Humam Rashid
% Picat homework.
% CISC 7120X, Fall 2019.

main =>
    printf("sphere_volume(5) = %w\n", sphere_volume(5)),
    printf("quadratic_equation(2,5,2) = %w\n", quadratic_equation(2,5,2)),
    printf("number_of_zeroes([]) = %w\n", number_of_zeroes([])),
    printf("number_of_zeroes([1,2,3]) = %w\n", number_of_zeroes([1,2,3])),
    printf("number_of_zeroes([0,1,2,3]) = %w\n", number_of_zeroes([0,1,2,3])),
    printf("number_of_zeroes([1,0,2,0,3]) = %w\n",
        number_of_zeroes([1,0,2,0,3])),
    printf("number_of_zeroes([0,0,0,0]) = %w\n", number_of_zeroes([0,0,0,0])),
    printf("print_pascal(5):\n"), draw_pascal(15),
    printf("euler206(): RUN\n"),
    printf("Number of days between 12/19/2001 and 11/20/2019: %d\n",
        days([12,19,2001],[11,20,2019])),
    printf("remove_consecutive_dups([a,a,a,a,b,c,c,a,a,d,e,e,e,e]): %w\n",
        remove_consecutive_dups([a,a,a,a,b,c,c,a,a,d,e,e,e,e])),
    printf("remove_dups([a,a,a,a,b,c,c,a,a,d,e,e,e,e]): %w\n",
        remove_dups([a,a,a,a,b,c,c,a,a,d,e,e,e,e])),
    printf("replicate([a,b,c], 3): %w\n", replicate([a,b,c], 3)).
    
% 1. volume of a sphere, given radius R.
sphere_volume(R) = (4 / 3) * pi * (R**3).

% 2. real roots of quadratic equation in the form ax^2 + bx + c = 0.
quadratic_equation(A, B, C) =
    [R1, R2], D = (B**2) - (4*A*C), D >= 0, =>
    R1 = (-B + sqrt(D)) / (2*A),
    R2 = (-B - sqrt(D)) / (2*A).

% 3. number of zeroes in a list of numbers.
number_of_zeroes([]) = 0.
number_of_zeroes([H|T]) = N =>
    (H == 0 -> N = number_of_zeroes(T) + 1; N = number_of_zeroes(T)).

% 4. print N rows of Pascal's triangle.
draw_pascal(N) =>
    foreach (I in 0..N)
        Num := 1,
        printf("%*s", N-I, " "),
        foreach(K in 0..I)
            printf("%d ", Num),
            Num := Num * (I-K) div (K+1)
        end,
        nl
    end.

% 5. find unique positive integer N whose square is 1_2_3_4_5_6_7_8_9_0 and each
% '_' is a single digit.
euler206() =>
    I = sqrt(19293949596979899).to_integer(),
    Found=fail,
    while (not Found)
        if ((I mod 10 == 3 || I mod 10 == 7) &&
            (I*I).to_string()=['1','_','2','_','3','_','4','_','5','_','6','_','7','_','8'|_])
            then
                writeln(I*10),
                Found := true
        else
            I := I-1
        end
    end.


% 6. number of days between two dates given in some format; assuming format is:
% [MM, DD, YYYY], i.e., a date is a list where the first element is a positive
% integer representing month, the second element is a positive integer
% representing day and the third element is a positive integer representing
% year. Also assuming Gregorian calendar and that first date argument is before
% second one.

leap_year_count(Date) = N =>
    Years := Date[3],
    if Date[1] <= 2 then
        Years := Years - 1
    end,
    N = (Years / 4 - Years / 100 + Years / 400).to_integer().

days(Date1, Date2) = Days =>
    Month_Days = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
    N1 := Date1[3] * 365 + Date1[2],
    foreach (I in 1..Date1[1])
        N1 := N1 + Month_Days[I]
    end,
    N1 := N1 + leap_year_count(Date1),
    N2 := Date2[3] * 365 + Date2[2],
    foreach (I in 1..Date2[1])
        N2 := N2 + Month_Days[I]
    end,
    N2 := N2 + leap_year_count(Date2),
    Days = N2 - N1.

% 7. remove consecutive duplicates of elements from given list.
remove_consecutive_dups([X|T@[X|_]]) = remove_consecutive_dups(T).
remove_consecutive_dups([X|T]) = [X|remove_consecutive_dups(T)].
remove_consecutive_dups(T) = T.

% 8. remove all duplicate elements; uses quicksort (implemented) to sort the
% list then remove consecutive duplicates.
qsort([]) = [].
qsort([H|T]) = L =>
    L = qsort([E : E in T, E <= H]) ++
        [H] ++
        qsort([E : E in T, E > H]).
remove_dups(Lst) = L =>
    L = remove_consecuitve_dups(qsort(Lst)).

% 9. replicate each element of a given list N number of times.
replicate(Lst,N) = L =>
    replicate(Lst,N,L).
replicate([],M,L) => L = [].
replicate([X|Lst],N,L) =>
    replicate_aux(X,N,L,L1),
    replicate(Lst,N,L1).
replicate_aux(Y,0,L,LR) => L = LR.
replicate_aux(X,N,L,LR) => L = [X|L1], replicate_aux(X,N-1,L1,LR).

% 10.


% EOF.
