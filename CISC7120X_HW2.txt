Humam Rashid
CISC 7120X, Fall 2019.

1. Valid integer literals in Java (following Java SE 12 specification) are:

    a. 123
    b. 123L
    c. 0123
    d. 00123
    e. 0x123

    Only the last one in the list given (i.e., 123x) is not a valid integer
    literal in Java.

2. In the following, Sigma = {'a', 'b'} and w is a string over Sigma.

1. a(a|b)*b                 = {w | w starts with 'a' and ends with 'b'}.
2. (a|b)*a(a|b)*a(a|b)*     = {w | w has at least two 'a's}.
3. b*(ab*a)*b*              = {w | w has an even number of 'a's}.
4. (a?b+)*a?                = {w | w does not have two 'a's in a row}.
5. b*|((b|ab)?(a|ba|bb))*   = {w | w does not end with the substring 'ab'}.

3. Regular expression for C strings. Assuming alphabet is all ASCII printable
characters.

Let A = [ASCII printable characters except \ and "] = Sigma - [\"]
Let N = [^n] = Sigma - n

Then, C strings without allowing \n and unescaped backslash and double quotes is:

"(A|\N)*"

4. Assuming the alphabet is:

{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, $, period, comma, asterisk}.

Let a = asterisk
Let N = [1-9]
Let D = [0-9]
Let F = (.DD)
Let T = (,DDD)
Let M = (N|ND|NDD)

Then, the regular expression for financial quantities in American notation as
described is:

$a*(0|MT*)F?

Written out, the above is the same as:

$('*')*(0|([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(,[0-9][0-9][0-9])*)(.[0-9][0-9])?

5. Sent with last update.

6. Simple lexer for toy language in ruby:

#!/usr/bin/ruby
# Lexer for toy language.
# Humam Rashid
# CISC 7120X, Fall 2019.
#
# This file includes the Token and Lexer classes. This lexer
# uses either backtracking or a lookahead.
#
# Grammar for toy language with left-recursion removed.
#
# Let e = epsilon, then:
#
# Program       -> Assignment*
# Assignment    -> Identifier = Exp;
# Exp           -> Term ExpPrime
# ExpPrime      -> e | + Term ExpPrime | - Term ExpPrime
# Term          -> Fact TermPrime
# TermPrime     -> e | * Fact TermPrime
# Fact          -> ( Exp ) | - Fact | + Fact | Literal | Identifier
# Identifier    -> Letter [ Letter | Digit ]*
# Letter        -> a | ... | z | A | ... | Z | _
# Literal       -> 0 | NonZeroDigit Digit*
# NonZeroDigit  -> 1 | ... | 9
# Digit         -> 0 | 1 | ... | 9

class Token
  attr_accessor :type
  attr_accessor :value

  EOI           = 0
  EQUAL         = 1
  SEMI          = 2
  PLUS          = 3
  MINUS         = 4
  TIMES         = 5
  L_PAREN       = 6
  R_PAREN       = 7
  IDENTIFIER    = 8
  INT_LITERAL   = 9

  def initialize
    @type = nil
    @value = nil
  end
  
  def unknown?
    @type.nil?
  end
end

class Lexer
  def initialize(input)
    @input = input
    @lookahead = nil
    @ret_prev_token = false
  end

  def next_token()
    if @ret_prev_token
      @ret_prev_token = false
      return @prev_token
    end

    token = Token.new
    @input.lstrip!
    case @input
    when ''
      token.type = Token::EOI
    when /\A=/
      token.type = Token::EQUAL
    when /\A;/
      token.type = Token::SEMI
    when /\A\+/
      token.type = Token::PLUS
    when /\A-/
      token.type = Token::MINUS
    when /\A\*/
      token.type = Token::TIMES
    when /\A\(/
      token.type = Token::L_PAREN
    when /\A\)/
      token.type = Token::R_PAREN
    when /\A([a-z]|[A-Z]|_)\w*\b/
      token.type = Token::IDENTIFIER
    when /\A0\Z|\A[1-9]\d*\b/
      token.type = Token::INT_LITERAL
    end
    raise "unknown token #{@input}" if token.unknown?
    @input = $'

    @prev_token = token
    token
  end

  def getback
    @ret_prev_token = true
  end

  def match(expected)
    @lookahead = next_token() if @lookahead.nil?
    expected == @lookahead.type
  end

  def advance()
    @lookahead = next_token()
  end
end

# EOF.
